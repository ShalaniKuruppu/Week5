#include <iostream>
#include <chrono>
#include <vector>
#include <random>
using namespace std;
using namespace std :: chrono;

int partition(int arr[], int start, int end)
{

	int pivot = arr[start];

	int count = 0;
	for (int i = start + 1; i <= end; i++) {
		if (arr[i] <= pivot)
			count++;
	}

	// Giving pivot element its correct position
	int pivotIndex = start + count;
	swap(arr[pivotIndex], arr[start]);

	// Sorting left and right parts of the pivot element
	int i = start, j = end;

	while (i < pivotIndex && j > pivotIndex) {

		while (arr[i] <= pivot) {
			i++;
		}

		while (arr[j] > pivot) {
			j--;
		}

		if (i < pivotIndex && j > pivotIndex) {
			swap(arr[i++], arr[j--]);
		}
	}

	return pivotIndex;
}

void quickSort(int arr[], int start, int end)
{

	// base case
	if (start >= end)
		return;

	// partitioning the array
	int a = partition(arr, start, end);

	// Sorting the left part
	quickSort(arr, start, a - 1);

	// Sorting the right part
	quickSort(arr, a + 1, end);
}
int main(){
    int length;  // get the size of array as an input
    cin>>length;
    clock_t start,end;

    int arr[length];
    for(int index=0;index<length;index++){   
        arr[index]=rand()%10000;
    }
    start=clock();  // start the clock

    quickSort(arr ,0 ,length);
    end =clock();  //end the clock
    double time =(double)(end-start)/CLOCKS_PER_SEC;
    cout<< time;

}


